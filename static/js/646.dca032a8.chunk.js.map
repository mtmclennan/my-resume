{"version":3,"file":"static/js/646.dca032a8.chunk.js","mappings":"uJACA,EAAsB,yBAAtB,EAAwD,4B,SCyBxD,EAvBmB,SAAH,GAUT,IATLA,EAAG,EAAHA,IACAC,EAAI,EAAJA,KACAC,EAAQ,EAARA,SAQMC,EAPH,EAAHC,IAOqB,UAAMC,EAAW,YAAIA,GAAmBA,EAE7D,OACE,gBAAKC,UAAWH,EAAU,UACxB,eAAGI,KAAMP,EAAKQ,OAAO,SAASC,IAAI,aAAY,UAC3CR,EACAC,MAIT,C,sJCaA,EA1BkB,WAChB,OAAgCQ,EAAAA,EAAAA,YAAgB,eAAzCC,EAAQ,KAAEC,EAAW,KAmB5B,MAAO,CACLD,SAAAA,EACAE,UAnBgB,SAACC,IACjBC,EAAAA,EAAAA,KACGC,IAAIC,EAAAA,GACJD,IAAIE,EAAAA,GACJF,IAAIG,EAAAA,GACJC,QAAQN,GACRO,MAAK,SAACC,GAAI,OACTV,EAAY,CACVW,OAAQC,IAAAA,SAAmBC,OAAOH,GAAO,CACvCI,gBAAgB,KAElB,IAEHC,OAAM,SAACC,GACN,MAAMA,CACR,GACJ,EAKF,E,kECRA,EAvBe,WACb,MAAgCC,IAAxBlB,EAAQ,EAARA,SAAUE,EAAS,EAATA,UAelB,OAZAiB,EAAAA,EAAAA,YAAU,WACRC,MAAMC,GACHX,MAAK,SAACY,GAAQ,OAAKA,EAASC,MAAM,IAClCb,MAAK,SAACa,GAILrB,EAAUqB,EACZ,GACJ,GAAG,KAID,oBAAS5B,UAAU,oBAAmB,SACnCK,IAAY,gBAAKwB,wBAAyBxB,KAGjD,E,gDCwBA,EA5CkB,WAChB,OACE,gBAAIL,UAAU,eAAc,WAC1B,yBACE,SAAC,IAAU,CACTF,KAAK,EACLH,MAAM,SAAC,IAAO,CAACmC,KAAK,eAAe9B,UAAU,SAC7CN,IAAG,cAASqC,EAAAA,GAAAA,OAAgB,wBAKhC,yBACE,SAAC,IAAU,CACTjC,KAAK,EACLH,MAAM,SAAC,IAAO,CAACmC,KAAK,sBACpBpC,IAAG,iBAAYqC,EAAAA,GAAAA,MAAa,mBAAkB,yBAMlD,yBACE,SAAC,IAAU,CACTjC,KAAK,EACLH,MAAM,SAAC,IAAO,CAACmC,KAAK,kBACpBpC,IAAKqC,EAAAA,GAAAA,SAAiB,yBAK1B,yBACE,SAAC,IAAU,CACTjC,KAAK,EACLJ,IAAKqC,EAAAA,GAAAA,OACLpC,MAAM,SAAC,IAAO,CAACmC,KAAK,gBAAiB,wBAO/C,ECpBA,EAvBuB,WACrB,OACE,gBAAI9B,UAAU,oBAAmB,WAC/B,2BACE,qBAKA,4DACG,KAEL,yBACE,0BAAO+B,EAAAA,GAAAA,UACJ,KAEL,yBACE,0BAAOA,EAAAA,GAAAA,YAIf,ECRA,EAZe,WACb,OACE,iBAAK/B,UAAU,UAAS,WACtB,SAACgC,EAAA,EAAI,CAACC,KAAK,WACX,iBAAKjC,UAAU,yBAAwB,WACrC,SAAC,EAAS,KACV,SAAC,EAAc,SAIvB,ECCA,EAVoB,WAClB,OACE,iBAAKA,UAAU,WAAU,WAEvB,SAAC,EAAM,KACP,SAAC,EAAM,MAGb,C","sources":["webpack://my-resume/./src/UI/ButtonAhref.module.scss?8bd0","UI/ButtonAhref.tsx","hooks/use-remark.ts","components/Letter.tsx","components/TopbarNav.tsx","components/TopBarPersonal.tsx","components/TopBar.tsx","pages/CoverLetter.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"ButtonAhref_btn__t224w\",\"navBtn\":\"ButtonAhref_navBtn__OX4yW\"};","import React from \"react\";\r\nimport classes from \"./ButtonAhref.module.scss\";\r\n\r\nconst ButtonAhef = ({\r\n  url,\r\n  icon,\r\n  children,\r\n  nav,\r\n}: {\r\n  url: string;\r\n  icon?: React.ReactNode;\r\n  children: React.ReactNode;\r\n  nav?: true | undefined;\r\n}) => {\r\n  const linkClass = nav ? `${classes.btn} ${classes.navBtn}` : classes.btn;\r\n\r\n  return (\r\n    <div className={linkClass}>\r\n      <a href={url} target=\"_blank\" rel=\"noreferrer\">\r\n        {icon}\r\n        {children}\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ButtonAhef;\r\n","import { useState } from \"react\";\r\nimport { unified } from \"unified\";\r\nimport remarkParse from \"remark-parse\";\r\nimport remarkRehype from \"remark-rehype\";\r\nimport DOMPurify from \"dompurify\";\r\nimport rehypeStringify from \"rehype-stringify\";\r\n\r\ninterface Html {\r\n  __html: string;\r\n}\r\n\r\nconst useRemark = () => {\r\n  const [postHtml, setPostHtml] = useState<Html>();\r\n\r\n  const convertMd = (data: string) => {\r\n    unified()\r\n      .use(remarkParse) // Parse markdown content to a syntax tree\r\n      .use(remarkRehype) // Turn markdown syntax tree to HTML syntax tree, ignoring embedded HTML\r\n      .use(rehypeStringify) // Serialize HTML syntax tree\r\n      .process(data)\r\n      .then((file) =>\r\n        setPostHtml({\r\n          __html: DOMPurify.sanitize(String(file), {\r\n            WHOLE_DOCUMENT: true,\r\n          }),\r\n        })\r\n      )\r\n      .catch((error) => {\r\n        throw error;\r\n      });\r\n  };\r\n  return {\r\n    postHtml,\r\n    convertMd,\r\n  };\r\n};\r\n\r\nexport default useRemark;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport useRemark from \"../hooks/use-remark\";\r\nimport coverLetter from \"../assets/markdown/coverLetter.md\";\r\n\r\nconst Letter = () => {\r\n  const { postHtml, convertMd } = useRemark();\r\n\r\n  // useEffect with an empty dependency array (`[]`) runs only once\r\n  useEffect(() => {\r\n    fetch(coverLetter)\r\n      .then((response) => response.text())\r\n      .then((text) => {\r\n        // Logs a string of Markdown content.\r\n        // Now you could use e.g. <rexxars/react-markdown> to render it.\r\n        // console.log(text);\r\n        convertMd(text);\r\n      });\r\n  }, []);\r\n\r\n  //   useEffect(() => {}, [postMarkdown]);\r\n  return (\r\n    <article className=\"letter__container\">\r\n      {postHtml && <div dangerouslySetInnerHTML={postHtml}></div>}\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default Letter;\r\n","import React from \"react\";\r\nimport ButtonAhef from \"../UI/ButtonAhref\";\r\nimport { address, contact } from \"../data\";\r\nimport IonIcon from \"@reacticons/ionicons\";\r\n\r\nconst TopbarNav = () => {\r\n  return (\r\n    <ul className=\"top-bar__nav\">\r\n      <li>\r\n        <ButtonAhef\r\n          nav={true}\r\n          icon={<IonIcon name=\"call-outline\" className=\"icon\" />}\r\n          url={`tel:${contact.phone}`}\r\n        >\r\n          Call Me\r\n        </ButtonAhef>\r\n      </li>\r\n      <li>\r\n        <ButtonAhef\r\n          nav={true}\r\n          icon={<IonIcon name=\"at-circle-outline\" />}\r\n          url={`mailto:${contact.email}?subject=Resume`}\r\n        >\r\n          Email me\r\n        </ButtonAhef>\r\n      </li>\r\n\r\n      <li>\r\n        <ButtonAhef\r\n          nav={true}\r\n          icon={<IonIcon name=\"logo-linkedin\" />}\r\n          url={contact.linkedin}\r\n        >\r\n          LinkedIn\r\n        </ButtonAhef>\r\n      </li>\r\n      <li>\r\n        <ButtonAhef\r\n          nav={true}\r\n          url={contact.github}\r\n          icon={<IonIcon name=\"logo-github\" />}\r\n        >\r\n          GitHub\r\n        </ButtonAhef>\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default TopbarNav;\r\n","import React from \"react\";\r\nimport { contact, address } from \"../data\";\r\nimport IonIcon from \"@reacticons/ionicons\";\r\n\r\nconst TopBarPersonal = () => {\r\n  return (\r\n    <ul className=\"top-bar__personal\">\r\n      <li>\r\n        <span>\r\n          {/* {`${address.number} ${address.street}, ${\r\n            address.city\r\n          }, ${address.province.slice(0, 2).toUpperCase()}`} */}\r\n        </span>\r\n        <span>Cambridge, Ontario, Canada</span>\r\n      </li>\r\n      |\r\n      <li>\r\n        <span>{contact.phone}</span>\r\n      </li>\r\n      |\r\n      <li>\r\n        <span>{contact.email}</span>\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default TopBarPersonal;\r\n","import React from \"react\";\r\nimport Logo from \"./logo/Logo\";\r\nimport TopbarNav from \"./TopbarNav\";\r\nimport TopBarPersonal from \"./TopBarPersonal\";\r\n\r\nconst TopBar = () => {\r\n  return (\r\n    <div className=\"top-bar\">\r\n      <Logo size=\"small\" />\r\n      <div className=\"top-bar__nav-container\">\r\n        <TopbarNav />\r\n        <TopBarPersonal />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TopBar;\r\n","import React from \"react\";\r\nimport Letter from \"../components/Letter\";\r\nimport SideBar from \"../components/SideBar\";\r\nimport TopBar from \"../components/TopBar\";\r\nimport { data } from \"../data\";\r\n\r\nconst CoverLetter = () => {\r\n  return (\r\n    <div className=\"page-top\">\r\n      {/* <SideBar data={data} /> */}\r\n      <TopBar />\r\n      <Letter />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CoverLetter;\r\n"],"names":["url","icon","children","linkClass","nav","classes","className","href","target","rel","useState","postHtml","setPostHtml","convertMd","data","unified","use","remarkParse","remarkRehype","rehypeStringify","process","then","file","__html","DOMPurify","String","WHOLE_DOCUMENT","catch","error","useRemark","useEffect","fetch","coverLetter","response","text","dangerouslySetInnerHTML","name","contact","Logo","size"],"sourceRoot":""}